生成静态库(linux中后缀名为.a)
	写好用于生成库的.c和.h文件
	生成目标文件(.o),  gcc  -c  <.c文件>
	生成静态库(.a),  ar crv <目标库名> <上一步的.o文件>  说明:目标库命名规则以lib开头,例如这里可以写libmyhello.a,调用时写-lmyhello
	使用:在别的.c函数总调用生成的库,  gcc -o <outFile> <用户.c文件> -I <库的头文件存放目录> -L <库文件存放目录> -l<库名>  (例如:-lmyhello)

生成动态库(linux中后缀名为.so)
	写好用于生成库的.c和.h文件
	生成目标文件(.o),  gcc  -c  <.c文件>
	生成动态库(.so), gcc -share -fPIC -o <目标.so文件,例如:libmyhello.so>  <上一步的.o文件hello.o>
	使用:在别的.c函数中调用生成的库,  gcc -o <outFile> <用户.c文件> -I <库的头文件存放目录> -L <库文件存放目录> -l<库名> (例如:-lmyhello)
	    注意:这里可能会出现找不到库文件的问题,把生成的.so文件放到/usr/lib下就可以解决
